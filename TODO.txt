Protocol:
*- assemble by hand a list of messages which es_interface_server can send to other servers
#- {set, flux_now, Flux} and {set_now, flux, Flux} transform to {set, flux, Flux}
#0 es_makeup_buffer_server {action, _, [RCS, VADD]} transform to {action, _, VADD} - beware of deadlock with es_core_server

General features:
*- throw error if something is missing from priv dir
*- es_config_server:send_tick/2 should use gen_server:cast instead of gen_server:call
*0 extract client code from egon_server
*0 es_clock_server should send ticks as gen_server:cast()
$- es_action_server should log it's actions
#+ every server should have a function which sends all of its exported state variables to es_log_server; that function should be called right after init and every time state is changed -> therefore es_log_server will have a log of all values changes and will be able to plot graphs
#- implement es_log_server:get_time_range(SimId, StartTime, StopTime, Points) which will return list of values of Points in time range from StartTime to StopTime
#0 changing simulation speed
#- add logging to configuration file

egon_client:
$- xls generation

Separating implementation and configuration:
$+ move hardcoded setpoints from es_rod_controller_server:rod_speed to curvebook/pls

Erlang/OTP problem:
#? errors in snapshot file do not generate error report
#? if two gen_tcp servers listen on the same port, they fail silently
#? if supervisor fails to start it's children, no error is generated

Userfriendlyness:
#0 generating client-server protocol from documentation (list all handle_call methods which have some modifier in it's documentation)
#0 building a release (OTP in Action, chapter 10)

Multi-user:
*0 replace gen_server:call(es_clock_server, {add_listener, {global, {SimId, ?MODULE}}), with gen_server:call(es_clock_server, {add_listener, process_info(self(), registered_name)}),

Bugs:
*- [34,228,228,228,228,34] = es_interface_client:send(S1, "{get, es_rod_position_server, control_position}\n") - remove quotes (34)
*0 If all simulators are stopped, then egon_server:new_sim cannot start a new one.

Removing dirty hacks:
%0 remove timer:sleep from egon_server:sim_loaded
%- rename es_clock_server:handle_call({start_ticking}); to es_clock_server:handle_call({action, start_ticking}); and es_clock_server:handle_call({stop_ticking}); to es_clock_server:handle_call({action, stop_ticking});

LEGEND:

Importance:
* - high
% - medium
# - low

Complexity:
+ - high
0 - medium
- - low
